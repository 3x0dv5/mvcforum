@using MVCForum.Website.Application.ExtensionMethods
@model MVCForum.Website.ViewModels.CreateTopicViewModel
@{
    Layout = "~/Views/Shared/_LayoutRightSideBar.cshtml";
    ViewBag.Title = Html.LanguageString("Topic.CreateDiscussion");
    var displayNone = "style=\"display: none;\"";
}

@section Header
{
    @(
 Bundle.JavaScript()
            .Add("~/Scripts/jquery.validate.min.js")
            .Add("~/Scripts/jquery.validate.unobtrusive.min.js")
            .Add("~/Scripts/jquery.tagsinput.min.js")
            .Add("~/Scripts/tags.js")

            .MvcRender("~/scripts/cache/topic-combined_#.js")
    )
    <script type="text/javascript">
        counter = 0;
    </script>
}

@section side
{
    @Html.Action("ListCategorySideMenu", "Category")
    @Html.Action("PopularTags", "Tag")
}

<div class="createtopicholder">

    @using (Html.BeginForm("Create", "Topic", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.ValidationSummary(false)
        @Html.AntiForgeryToken()

        <div class="row paddedrow">
            <div class="col-md-8 topictitleholder">
                <h2>@ViewBag.Title</h2>
            </div>
            @if (Html.Settings().EnablePolls == true)
            {
                <div class="col-md-4 pollcreatebuttonholder">
                    <a href="#" class="btn-mvc btn-mvc-fullwidth createpollbutton">@Html.LanguageString("Poll.Button.Create")</a>
                    <a href="#" style="display: none;" class="btn-mvc btn-mvc-fullwidth removepollbutton">@Html.LanguageString("Poll.Button.Remove")</a>
                </div>
            }
        </div>

        <div class="paddedrow topicname">
            <div class="form-group">
                @Html.LabelFor(model => model.Name)
                @Html.TextBoxFor(model => model.Name, new { @class = "createtopicname form-control" })
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>

        <div class="relatedtopicsholder">
            <h5>@Html.LanguageString("Topic.AlreadyAnswered")</h5>
            <div class="relatedtopicskey"></div>
        </div>

        if (Html.Settings().EnablePolls == true)
        {
            <div class="row paddedrow pollanswerholder" style="display: none;">
                <div class="col-md-9">
                    <ul class="pollanswerlist"></ul>
                    <input type="hidden" id="pollanswerplaceholder" value="@Html.LanguageString("Poll.Placeholder.TypeAnswerHere")" />
                </div>
                <div class="col-md-3 polladdremovenewanswers">
                    <a href="#" class="btn-mvc addanswer">
                        <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                    </a>
                    <a href="#" class="btn-mvc removeanswer">
                        <span class="glyphicon glyphicon-minus" aria-hidden="true"></span>
                    </a>
                </div>
            </div>
        }

        <div class="row">
            <div class="col-md-12 topiccontent">
                <div class="editor-field editorholder">
                    @Html.EditorFor(model => model.Content)
                    @Html.ValidationMessageFor(model => model.Content)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 createtopicbuttonholder">
                <div class="submit-holder">
                    <input type="submit" class="btn-mvc btn-mvc-large btn-mvc-green btn-mvc-fullwidth" value="@Html.LanguageString("Topic.CreateDiscussion")" />
                </div>
                <div class="checkbox createsubscribe">
                    @using (Html.BeginLabelFor(m => m.SubscribeToTopic, new { @class = "checkbox" }))
                    {
                        @Html.CheckBoxFor(m => m.SubscribeToTopic)
                    }
                    @Html.ValidationMessageFor(m => m.SubscribeToTopic)
                </div>
                <div class="checkbox createsticky" @Html.Raw(Model.OptionalPermissions.CanStickyTopic ? "" : displayNone)>
                    @using (Html.BeginLabelFor(m => m.IsSticky, new { @class = "checkbox" }))
                    {
                        @Html.CheckBoxFor(m => m.IsSticky)
                    }
                    @Html.ValidationMessageFor(m => m.IsSticky)
                </div>
                <div class="checkbox createlocked" @Html.Raw(Model.OptionalPermissions.CanLockTopic ? "" : displayNone)>
                    @using (Html.BeginLabelFor(m => m.IsLocked, new { @class = "checkbox" }))
                    {
                        @Html.CheckBoxFor(m => m.IsLocked)
                    }
                    @Html.ValidationMessageFor(m => m.IsLocked)
                </div>
            </div>
            <div class="col-md-5 col-md-offset-1 topiccategory">
                <div class="form-group">
                    @Html.LabelFor(model => model.Category)
                    @Html.DropDownListFor(model => model.Category, Model.Categories, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Category)
                </div>
                <div class="form-group">
                    <label>@Html.Lang("Topic.Label.Tags")</label>
                    <div class="topictagholder">
                        @Html.TextAreaFor(model => model.Tags, new { @class = "tagstextarea tags", title = Html.LanguageString("Topic.TagThisTopic") })
                    </div>
                </div>
                <div class="form-group createuploadfiles" @Html.Raw(Model.OptionalPermissions.CanUploadFiles ? "" : displayNone)>
                    @Html.LabelFor(x => x.Files)
                    <div class="input-group">
                        <span class="input-group-btn">
                            <span class="btn btn-default btn-file">
                                @Html.LanguageString("Post.Browse") <input type="file" name="files" id="files" value="">
                            </span>
                        </span>
                        <input type="text" class="form-control" readonly="">
                    </div>
                    @Html.ValidationMessageFor(x => x.Files)
                </div>
            </div>
        </div>
    }

</div>
